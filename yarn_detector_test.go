package yarnstart_test

import (
	"os"
	"path/filepath"
	"testing"

	yarnstart "github.com/paketo-buildpacks/yarn-start"
	"github.com/sclevine/spec"

	. "github.com/onsi/gomega"
)

func testYarnDetector(t *testing.T, context spec.G, it spec.S) {
	var (
		Expect = NewWithT(t).Expect

		workingDir string
		detector   *yarnstart.YarnDetector
	)

	it.Before(func() {
		var err error
		workingDir, err = os.MkdirTemp("", "yarn-detector")
		Expect(err).NotTo(HaveOccurred())

		detector = yarnstart.NewYarnDetector(workingDir)
	})

	it.After(func() {
		Expect(os.RemoveAll(workingDir)).To(Succeed())
	})

	context("DetectYarnVersion", func() {
		context("when .yarnrc.yml exists", func() {
			it.Before(func() {
				err := os.WriteFile(filepath.Join(workingDir, ".yarnrc.yml"), []byte("yarnPath: .yarn/releases/yarn-berry.cjs\n"), 0644)
				Expect(err).NotTo(HaveOccurred())
			})

			it("detects Yarn Berry", func() {
				version, err := detector.DetectYarnVersion()
				Expect(err).NotTo(HaveOccurred())
				Expect(version).To(Equal(yarnstart.YarnBerry))
			})
		})

		context("when packageManager field indicates Berry", func() {
			it.Before(func() {
				packageJSON := `{
					"name": "test-app",
					"packageManager": "yarn@3.6.0"
				}`
				err := os.WriteFile(filepath.Join(workingDir, "package.json"), []byte(packageJSON), 0644)
				Expect(err).NotTo(HaveOccurred())
			})

			it("detects Yarn Berry", func() {
				version, err := detector.DetectYarnVersion()
				Expect(err).NotTo(HaveOccurred())
				Expect(version).To(Equal(yarnstart.YarnBerry))
			})
		})

		context("when packageManager field indicates berry", func() {
			it.Before(func() {
				packageJSON := `{
					"name": "test-app",
					"packageManager": "yarn@berry"
				}`
				err := os.WriteFile(filepath.Join(workingDir, "package.json"), []byte(packageJSON), 0644)
				Expect(err).NotTo(HaveOccurred())
			})

			it("detects Yarn Berry", func() {
				version, err := detector.DetectYarnVersion()
				Expect(err).NotTo(HaveOccurred())
				Expect(version).To(Equal(yarnstart.YarnBerry))
			})
		})

		context("when packageManager field indicates Classic", func() {
			it.Before(func() {
				packageJSON := `{
					"name": "test-app",
					"packageManager": "yarn@1.22.0"
				}`
				err := os.WriteFile(filepath.Join(workingDir, "package.json"), []byte(packageJSON), 0644)
				Expect(err).NotTo(HaveOccurred())
			})

			it("detects Yarn Classic", func() {
				version, err := detector.DetectYarnVersion()
				Expect(err).NotTo(HaveOccurred())
				Expect(version).To(Equal(yarnstart.YarnClassic))
			})
		})

		context("when yarn.lock uses Berry format", func() {
			it.Before(func() {
				berryLockContent := `# This file is generated by running "yarn install" inside your project.
# Manual changes might be lost - proceed with caution!

__metadata:
  version: 6
  cacheKey: 8

"leftpad@npm:~0.0.1":
  version: 0.0.1
  resolution: "leftpad@npm:0.0.1"
  checksum: 86b1a4de4face180ac545a83f1503523d8fed115
  languageName: node
  linkType: hard
`
				err := os.WriteFile(filepath.Join(workingDir, "yarn.lock"), []byte(berryLockContent), 0644)
				Expect(err).NotTo(HaveOccurred())
			})

			it("detects Yarn Berry", func() {
				version, err := detector.DetectYarnVersion()
				Expect(err).NotTo(HaveOccurred())
				Expect(version).To(Equal(yarnstart.YarnBerry))
			})
		})

		context("when yarn.lock uses Classic format", func() {
			it.Before(func() {
				classicLockContent := `# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1


leftpad@~0.0.1:
  version "0.0.1"
  resolved "https://registry.yarnpkg.com/leftpad/-/leftpad-0.0.1.tgz#86b1a4de4face180ac545a83f1503523d8fed115"
  integrity sha1-hrGk3k+s4YCsVFqD8VA1I9j+0RU=
`
				err := os.WriteFile(filepath.Join(workingDir, "yarn.lock"), []byte(classicLockContent), 0644)
				Expect(err).NotTo(HaveOccurred())
			})

			it("detects Yarn Classic", func() {
				version, err := detector.DetectYarnVersion()
				Expect(err).NotTo(HaveOccurred())
				Expect(version).To(Equal(yarnstart.YarnClassic))
			})
		})

		context("when no yarn indicators exist", func() {
			it("defaults to Yarn Classic", func() {
				version, err := detector.DetectYarnVersion()
				Expect(err).NotTo(HaveOccurred())
				Expect(version).To(Equal(yarnstart.YarnClassic))
			})
		})

		context("precedence", func() {
			it.Before(func() {
				// Create both .yarnrc.yml (Berry indicator) and classic yarn.lock
				err := os.WriteFile(filepath.Join(workingDir, ".yarnrc.yml"), []byte("yarnPath: .yarn/releases/yarn-berry.cjs\n"), 0644)
				Expect(err).NotTo(HaveOccurred())

				classicLockContent := `# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1

leftpad@~0.0.1:
  version "0.0.1"
  resolved "https://registry.yarnpkg.com/leftpad/-/leftpad-0.0.1.tgz#86b1a4de4face180ac545a83f1503523d8fed115"
  integrity sha1-hrGk3k+s4YCsVFqD8VA1I9j+0RU=
`
				err = os.WriteFile(filepath.Join(workingDir, "yarn.lock"), []byte(classicLockContent), 0644)
				Expect(err).NotTo(HaveOccurred())
			})

			it("prioritizes .yarnrc.yml over yarn.lock format", func() {
				version, err := detector.DetectYarnVersion()
				Expect(err).NotTo(HaveOccurred())
				Expect(version).To(Equal(yarnstart.YarnBerry))
			})
		})
	})

	context("GetYarnrcConfig", func() {
		context("when .yarnrc.yml exists", func() {
			it.Before(func() {
				yarnrcContent := `yarnPath: .yarn/releases/yarn-berry.cjs
nodeLinker: pnp
enableGlobalCache: false
`
				err := os.WriteFile(filepath.Join(workingDir, ".yarnrc.yml"), []byte(yarnrcContent), 0644)
				Expect(err).NotTo(HaveOccurred())
			})

			it("reads the configuration", func() {
				config, err := detector.GetYarnrcConfig()
				Expect(err).NotTo(HaveOccurred())
				Expect(config).To(HaveKey("yarnPath"))
				Expect(config["yarnPath"]).To(Equal(".yarn/releases/yarn-berry.cjs"))
				Expect(config["nodeLinker"]).To(Equal("pnp"))
				Expect(config["enableGlobalCache"]).To(Equal(false))
			})
		})

		context("when .yarnrc.yml does not exist", func() {
			it("returns empty config", func() {
				config, err := detector.GetYarnrcConfig()
				Expect(err).NotTo(HaveOccurred())
				Expect(config).To(BeEmpty())
			})
		})
	})

	context("YarnVersion String", func() {
		it("returns correct string representations", func() {
			Expect(yarnstart.YarnClassic.String()).To(Equal("Classic"))
			Expect(yarnstart.YarnBerry.String()).To(Equal("Berry"))
		})
	})
}
